{"version":3,"sources":["our_picture.JPG","components/createpost.component.js","components/post.component.js","components/posts.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreatePost","props","state","title","content","user","blogDate","onChangeTitle","bind","onChangeContent","onSubmit","e","this","setState","target","value","preventDefault","console","log","newPost","date","Date","axios","post","then","res","data","style","marginTop","className","type","onChange","Component","Post","parse","dateString","toLocaleString","Posts","posts","get","response","catch","error","map","currentPost","i","getPosts","App","signedIn","onSignIn","onSignOut","onSubscribe","onSuccessSignIn","googleUser","profile","getBasicProfile","getId","name","getName","getEmail","id_token","getAuthResponse","to","class","data-onsuccess","data-theme","onClick","src","ourPicture","alt","path","exact","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.558cbd72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/our_picture.15ceba0f.JPG\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class CreatePost extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n        title: '',\r\n        content: '',\r\n        user: '',\r\n        blogDate: '',\r\n    }\r\n\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeContent = this.onChangeContent.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n}\r\n\r\nonChangeTitle(e) {\r\n  this.setState({\r\n      title: e.target.value\r\n  });\r\n}\r\n\r\n  onChangeContent(e) {\r\n    this.setState({\r\n        content: e.target.value\r\n    });\r\n}\r\n\r\n  onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        console.log(`Form submitted:`);\r\n        console.log(`Blog Content: ${this.state.content}`);\r\n\r\n        const newPost = {\r\n            title: this.state.title,\r\n            content: this.state.content,\r\n            user: this.props.user,\r\n            date: Date()\r\n        };\r\n\r\n        axios.post('/post', newPost)\r\n            .then(res => console.log(res.data));\r\n\r\n        this.setState({\r\n            title: '',\r\n            content: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n     return (\r\n         <div style={{marginTop: 10}}>\r\n             <h3>Create New Blog Post</h3>\r\n             <form onSubmit={this.onSubmit}>\r\n             <div className=\"form-group\">\r\n                 <label>Blog Post Title: </label>\r\n                 <input  type=\"text\"\r\n                         className=\"form-control\"\r\n                         value={this.state.title}\r\n                         onChange={this.onChangeTitle}\r\n                         />\r\n             </div>\r\n                 <div className=\"form-group\">\r\n                     <label>Enter Post Here: </label>\r\n                     <input  type=\"text\"\r\n                             className=\"form-control\"\r\n                             value={this.state.content}\r\n                             onChange={this.onChangeContent}\r\n                             />\r\n                 </div>\r\n                 <div className=\"form-group\">\r\n                     <input type=\"submit\" value=\"Create Post\" className=\"btn btn-primary\" />\r\n                 </div>\r\n             </form>\r\n         </div>\r\n     )\r\n }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nexport default class Post extends Component {\r\n\r\n\r\n  render() {\r\n\r\n    const date = Date.parse(this.props.post.date);\r\n    const dateString = new Date(date).toLocaleString();\r\n\r\n         return (\r\n            <div className=\"blog-post\">\r\n              <div className=\"blog-title\">\r\n                {this.props.post.title}\r\n              </div>\r\n                <div className=\"blog-desc\">\r\n                  by:  {this.props.post.user} on  {dateString}\r\n                </div>\r\n                <div className=\"blog-content\">\r\n                  {this.props.post.content}\r\n                </div>\r\n            </div>\r\n         )\r\n     }\r\n }\r\n","import React, { Component } from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Post from './post.component'\r\n\r\nexport default class Posts extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n      axios.get('/posts/')\r\n          .then(response => {\r\n              this.setState({ posts: response.data });\r\n          })\r\n          .catch(function (error){\r\n              console.log(error);\r\n          })\r\n  }\r\n\r\n  getPosts() {\r\n        return this.state.posts.map(function(currentPost, i){\r\n            return <Post post={currentPost} />;\r\n        })\r\n    }\r\n\r\n  render() {\r\n         return (\r\n             <div>\r\n                 <h3>Our Posts</h3>\r\n                { this.getPosts() }\r\n             </div>\r\n         )\r\n     }\r\n }\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CreatePost from \"./components/createpost.component\";\r\nimport Posts from \"./components/posts.component\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport ourPicture from './our_picture.JPG';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        data: null,\r\n        signedIn: false,\r\n        user: \"\"\r\n      };\r\n      this.onSignIn = this.onSignIn.bind(this);\r\n      this.onSignOut = this.onSignOut.bind(this);\r\n      this.onSubscribe = this.onSubscribe.bind(this);\r\n      this.onSuccessSignIn = this.onSuccessSignIn.bind(this);\r\n  }\r\n\r\n  onSubscribe(){\r\n    console.log(\"you are subscribed!\")\r\n  }\r\n\r\n  onSuccessSignIn(googleUser){\r\n    if (process.env.NODE_ENV === \"production\"){\r\n      console.log(\"oops, going to the wrong place\");\r\n      // Useful data for your client-side scripts:\r\n      var profile = googleUser.getBasicProfile();\r\n      console.log(\"ID: \" + profile.getId()); // Don't send this directly to your server!\r\n      let name = profile.getName();\r\n      console.log('Full Name: ' + profile.getName());\r\n      console.log(\"Email: \" + profile.getEmail());\r\n\r\n      // The ID token you need to pass to your backend:\r\n      var id_token = googleUser.getAuthResponse().id_token;\r\n      console.log(\"ID Token: \" + id_token);\r\n      this.setState({\r\n        signedIn: true,\r\n        user: name\r\n      });\r\n    } else{\r\n      this.setState({\r\n        signedIn: true,\r\n        user: \"testUser1\"\r\n      });\r\n      console.log(\"signed in!\");\r\n    }\r\n  }\r\n\r\n  onSignIn(googleUser) {\r\n    if (process.env.NODE_ENV === \"production\"){\r\n      // Useful data for your client-side scripts:\r\n      var profile = googleUser.getBasicProfile();\r\n      console.log(\"ID: \" + profile.getId()); // Don't send this directly to your server!\r\n      let name = profile.getName();\r\n      console.log('Full Name: ' + profile.getName());\r\n      console.log(\"Email: \" + profile.getEmail());\r\n\r\n      // The ID token you need to pass to your backend:\r\n      var id_token = googleUser.getAuthResponse().id_token;\r\n      console.log(\"ID Token: \" + id_token);\r\n      this.setState({\r\n        signedIn: true,\r\n        user: name\r\n      });\r\n      console.log(\"signed in!\");\r\n    } else{\r\n      this.setState({\r\n        signedIn: true,\r\n        user: \"testUser1\"\r\n      });\r\n      console.log(\"signed in!\");\r\n    }\r\n\r\n  }\r\n\r\n  onSignOut(){\r\n    this.setState({\r\n      signedIn: false,\r\n      user: \"\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const blogDescription = \"Hi there! We are Emily and Tara. We are seniors in EE461L this semester. We have been working on projects together since Freshman Year! We hope you enjoy our blog. Feel free to contribute (once you sign in) :)\";\r\n\r\n    return (\r\n      <Router>\r\n        <div className=\"container\">\r\n        <br/>\r\n        <div className=\"navBar\">\r\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"collpase navbar-collapse\">\r\n              <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"navbar-item\">\r\n                  <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n                </li>\r\n                {this.state.signedIn == true\r\n                  ? <li className=\"navbar-item\">\r\n                    <Link to=\"/create\" className=\"nav-link\">Create New Post</Link>\r\n                  </li>\r\n                  : <div/>\r\n                }\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n          {this.state.signedIn == false\r\n            ? <div class=\"g-signin2\" data-onsuccess={this.onSuccessSignIn} data-theme=\"dark\"></div>\r\n            : <button onClick={this.onSignOut}>Sign Out</button>}\r\n          <button onClick={this.onSubscribe}>Subscribe</button>\r\n          </div>\r\n          <br/>\r\n          <div className=\"top-section\">\r\n            <div className=\"blog-main-header\">\r\n              <h1>Welcome to Our Blog</h1>\r\n              <div className=\"blog-main-desc\">{blogDescription}\r\n              </div>\r\n            </div>\r\n           <img src={ourPicture} className=\"App-logo\" alt=\"logo\" />\r\n          </div>\r\n          <Route path=\"/\" exact component={Posts} />\r\n          <Route path=\"/create\" render={(props) => <CreatePost {...props} user={this.state.user}/>} />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}